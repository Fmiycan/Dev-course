const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
import * as cheerio from 'cheerio';

class Scraper {
    constructor(pair, token, chatId, targetTime = '15m') {
        this.pair = pair;
        this.token = token;
        this.chatId = chatId;
        this.targetTime = targetTime;
        this.previousData = {};
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
    async fetchData() {
        try {
            const response = await fetch(this.pair.url, { headers: { 'User-Agent': 'Mozilla/5.0' } });
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.statusText}`);
            const html = await response.text();
            const $ = cheerio.load(html);

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const tablist = $('[role="tablist"]');
            if (tablist.length) {
                tablist.find('button').each((_, button) => {
                    if ($(button).data('test') === this.targetTime) {
                        $(button).attr('aria-selected', 'true');
                        console.log(`–í—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: ${$(button).text().trim()}`);
                    }
                });
            }

            // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            const technicalData = {};
            $('tbody.datatable_body__tb4jX tr').each((_, row) => {
                const columns = $(row).find('td');
                if (columns.length === 4) {
                    const indicator = $(columns[0]).text().trim();
                    const value = $(columns[1]).text().trim();
                    const signal = $(columns[2]).text().trim();
                    technicalData[indicator] = { value, signal };
                }
            });

            return technicalData;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${this.pair.name}:`, error);
            return null;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º —Å–∏–≥–Ω–∞–ª–æ–≤
    addEmoji(signal) {
        if (signal.includes('Strong Buy')) return 'üü¢ Strong Buy';
        if (signal.includes('Buy')) return 'üü° Buy';
        if (signal.includes('Strong Sell')) return 'üî¥ Strong Sell';
        if (signal.includes('Sell')) return 'üü† Sell';
        if (signal.includes('Neutral')) return '‚ö™ Neutral';
        return signal;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
    async sendToTelegram(message) {
        try {
            const url = `https://api.telegram.org/bot${this.token}/sendMessage`;
            const payload = {
                chat_id: this.chatId,
                text: message,
            };

            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });

            const result = await response.json();
            if (!result.ok) throw new Error(`–û—à–∏–±–∫–∞ Telegram: ${result.description}`);
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ${message}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    async checkAndUpdate() {
        const currentData = await this.fetchData();
        if (!currentData) return;

        const updates = [];
        for (const [indicator, data] of Object.entries(currentData)) {
            const previous = this.previousData[indicator];
            if (!previous || previous.value !== data.value || previous.signal !== data.signal) {
                updates.push(
                    `${this.pair.name} - ${indicator}: Value=${data.value}, Signal=${this.addEmoji(data.signal)}`
                );
            }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if (updates.length > 0) {
            const message = updates.join('\n');
            await this.sendToTelegram(message);
            this.previousData = currentData; // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        } else {
            console.log(`–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è ${this.pair.name}`);
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async startScraping() {
        setInterval(async () => {
            await this.checkAndUpdate();
        }, 30000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    }
}

export default Scraper;
